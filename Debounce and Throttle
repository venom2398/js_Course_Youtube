**Debounce** is a technique used to limit the rate at which a function is executed. 
It ensures that a function is only called after a certain amount of time has passed since the last time it was invoked. 
This is particularly useful for events that can fire multiple times in quick succession, such as keystrokes or window resizing.
The function will only execute after the specified delay period has elapsed without any new events.

example:- Debounce
function debounc(func, delay){
	let timer;
  const data = (...args) =>{
  	clearInterval(timer);
    timer = setTimeout(()=>{
    	func.apply(this, args)
    }, delay)
  }
  
  return data;
}

window.addEventListener("resize",debounc(()=>{
	console.log("resized")
},2000))

---------------------

**Throttle** is a technique that ensures a function is called at most once in a specified period.
Unlike debounce, which waits for a pause in events, throttle ensures that the function is called at regular intervals, regardless of how many times the event is triggered. 
This is useful for events that can fire continuously, like scrolling or resizing, where you want to limit the number of times a function is executed.

example: - Throttle

function throttle(func, delay) {
  let lastTime = 0;
  return function () {
    const now = Date.now();
    if (now - lastTime >= delay) {
      lastTime = now;
      func.apply(this, arguments);
    }
  };
}

// Example usage:
window.addEventListener('resize', throttle(function () {
  console.log('Scrolled!');
}, 200));

