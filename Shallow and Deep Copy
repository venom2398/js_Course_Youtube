-----------
Shallow Copy:-

Creates a new object that shares the same references to the properties of the original object.
If a property is a primitive value (like a number, string, or boolean), the copy will have its own independent value.
If a property is an object or array, both the original and the copy will refer to the same object or array in memory.
Changes made to a property in the original object will also be reflected in the copy, and vice versa.
----------
Deep Copy:-

Creates a new object that has its own independent copies of all properties, including nested objects and arrays.
If a property is a primitive value, the copy will have its own independent value.
If a property is an object or array, a new object or array will be created for the copy, and its properties will be copied recursively.
Changes made to a property in the original object will not affect the copy, and vice versa.
----------
const obj1 = {
  name: 'obj1',
  age: 18,
  addrers: {
    city: '北京',
    country: '中国'
  }
}


// using the spread operator
const obj2 = {...obj1};
obj2.age = 15

/*problem in shallow copy
/-> here we change the city which is deeply nested in obj1
/-> when we change the obj2, it also change the obj1 and obj3 because the nested object will point to the same memory of obj1.
*/

obj2.addrers.city = 'Istanbul';

// using the Object.assign
const obj3 = Object.assign({},obj1);
obj3.age = 12

console.log(obj1,"obj1"); //original object
console.log(obj2,"obj2"); //spread Operator
console.log(obj3,"obj3"); //Object.assign

/************************/

const obj1 = {
  name: 'obj1',
  age: 18,
  addrers: {
    city: '北京',
    country: '中国'
  },
  friends: function () {
    console.log('friends');
  }
}

// here we used JSON.parse and JSON.stringify
const obj2 = JSON.parse(JSON.stringify(obj1));  
obj2.age = 20; // level 1 check
obj2.addrers.city = "istanbul"; // level 2 check

/*problem in Deep copy
/-> in the obj1 we are having a key -> friends where value is a function.
/-> so the function is not copied from obj1 to obj2.
*/

console.log(obj1,"obj1"); //original object
console.log(obj2,"obj2"); //copied object

/ ********************* /
// to tackle the function Problem in deepCopy we need to use the loadslash library
or we need to create custom function of deep clone like below

function deepCopy(obj) {
  // Check if the value is an object or array, otherwise return the value
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }

  // Create an array or object to hold the values
  const copy = Array.isArray(obj) ? [] : {};

  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      // Recursively copy for nested objects, otherwise directly assign the value
      copy[key] = deepCopy(obj[key]);
    }
  }

  return copy;
}

// Example usage with your object
const obj1 = {
  name: 'obj1',
  age: 18,
  addrers: {
    city: '北京',
    country: '中国'
  },
  friends: function () {
    console.log('friends');
  }
};

const obj2 = deepCopy(obj1);

obj2.age = 20; // level 1 check
obj2.addrers.city = "istanbul"; // level 2 check

console.log(obj1, "obj1"); // Original object
console.log(obj2, "obj2"); // Copied object
 
