const obj1 = {
  name: "basava",
  age: 24,
  func: function emp(state, country) {
    return `Name is ${this.name}, age is ${this.age}, state is ${state}, country is ${country}.`
  },
}

const obj2 = {
  name: "kiran",
  age: 26,
}

// call -> here we pass the parameter individually
console.log(obj1.func.call(obj2, "karnataka", "India"))

// apply ->here we pass the parameter's in array
console.log(obj1.func.apply(obj2, ["karnataka", "India"]))

//bind -> here it will create the new function for obj2 same as obj1 and then we are storing that in to result and we can call whenever it's needed.
const result = obj1.func.bind(obj2, "karnataka", "India")
console.log(result())
/*********************/
The `call`, `apply`, and `bind` methods in JavaScript are used to control the context (`this` value) in which a function is executed. Here's a breakdown of each method with real-time examples:

`call` Method
The `call` method calls a function with a given `this` value and arguments provided individually.

Example:

const person = {
    firstName: "John",
    lastName: "Doe",
    fullName: function() {
        return this.firstName + " " + this.lastName;
    }
};

const anotherPerson = {
    firstName: "Jane",
    lastName: "Smith"
};

console.log(person.fullName.call(anotherPerson)); // Output: Jane Smith


In this example, `person.fullName.call(anotherPerson)` calls the `fullName` method of `person` but with `anotherPerson` as the `this` value.

`apply` Method
The `apply` method is similar to `call`, but it takes an array of arguments instead of listing them individually.

Example:

function greet(greeting, punctuation) {
    return greeting + ", " + this.firstName + " " + this.lastName + punctuation;
}

const person = {
    firstName: "John",
    lastName: "Doe"
};

console.log(greet.apply(person, ["Hello", "!"])); // Output: Hello, John Doe!


Here, `greet.apply(person, ["Hello", "!"])` calls the `greet` function with `person` as the `this` value and the arguments `["Hello", "!"]`.

`bind` Method
The `bind` method creates a new function that, when called, has its `this` value set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.

Example:

const person = {
    firstName: "John",
    lastName: "Doe",
    fullName: function() {
        return this.firstName + " " + this.lastName;
    }
};

const boundFullName = person.fullName.bind(person);
console.log(boundFullName()); // Output: John Doe


In this example, `person.fullName.bind(person)` creates a new function `boundFullName` that is permanently bound to `person` as its `this` value.

Real-Time Example
Imagine you have a button on a webpage, and you want to ensure that when it's clicked, a method from a specific object is called with the correct context.

HTML:

<button id="myButton">Click me</button>


JavaScript:
const user = {
    name: "Alice",
    greet: function() {
        console.log("Hello, " + this.name);
    }
};

const button = document.getElementById("myButton");
button.addEventListener("click", user.greet.bind(user)); // Output: Hello, Alice


In this real-time example, `user.greet.bind(user)` ensures that the `greet` method is called with `user` as its `this` value when the button is clicked.

These methods are powerful tools for managing the context in which functions are executed, especially in complex applications where the `this` value can change based on how functions are called.
