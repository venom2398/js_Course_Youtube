Spread operator: Expands arrays/objects or splits elements into separate values.
Rest operator: Gathers remaining arguments/elements into an array or object.

let store = { 
  0: {
    product: "bread",
    price: 20
  },
  1: {
    product: "butter",
    price: 100
  },
  2: {
    product: "cheese",
    price: 200
  },
  3: {
    product: "jam",
    price: 70
  },
  4: {
    product: "sauce",
    price: 150
  },
};

let cart = [];

// Function to add products to the cart and calculate total price
function myCart(...newItems) {  // Rest operator to gather all arguments into an array
  let totalAmount = 0;

  // Iterate over each item passed to the function
  newItems.forEach(item => {
    // Check if the product exists in the store using Spread Operator to get store values
    const foundProduct = [...Object.values(store)].find(storeItem => storeItem.product === item);

    if (foundProduct) {
      // If the product is found, add it to the cart (if not already added)
      if (!cart.includes(foundProduct.product)) {
        cart = [...cart, foundProduct.product];  // Spread operator to add new product
      }
      // Add the price to the total amount
      totalAmount += foundProduct.price;
    } else if(!item.length){
    	console.log("No items in the cart!");
    }else {
      console.log(`${item} is not available in the store.`);
    }
  });

  // Display the updated cart and the total amount
  console.log("Updated Cart:", cart.join(', '));
  console.log("Total Amount:", totalAmount);
}

// Calling the function with products 'bread' and 'jam'
myCart('bread', 'jam');

//calling with empty cart;
myCart('');

// Calling again with an unavailable product
myCart('cheese', 'soda');

